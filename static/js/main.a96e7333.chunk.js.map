{"version":3,"sources":["components/images/inner_pi.png","media/Elyse_Shackleton_Resume_June_2018.pdf","components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Heading","react_default","a","createElement","width","className","Button_default","href","variant","DropdownButton_default","as","ButtonGroup","title","id","Dropdown_default","Item","eventKey","target","rel","agent_file","download","React","Component","App","components_Heading","flex","src","inner_pi","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kWCmCvBC,mLAxBX,OACEC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,MAAM,QACZH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,oCACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,KAAK,uCAAuCC,QAAQ,mBAA5D,UACIP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAgBM,QAAQ,kBAAkBE,GAAIC,IAAaC,MAAM,WAAWC,GAAG,sBAC3EZ,EAAAC,EAAAC,cAACW,EAAAZ,EAASa,KAAV,CAAeC,SAAS,IAAIT,KAAK,sCAC7BU,OAAO,SACPC,IAAI,uBAFR,kBAGAjB,EAAAC,EAAAC,cAACW,EAAAZ,EAASa,KAAV,CAAeC,SAAS,KAAxB,UAGRf,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,KAAMY,IAAYX,QAAQ,kBAAkBY,SAAS,yCAA7D,aAIJnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBArBAgB,IAAMC,WC4CbC,mLA9CX,OACEtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAEhBJ,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KACVE,UAAU,WACVE,KAAK,sCACLU,OAAO,SACPC,IAAI,uBAJM,WAAZ,MAMcjB,EAAAC,EAAAC,cAAA,KACZE,UAAU,WACVE,KAAK,iCACLU,OAAO,SACPC,IAAI,uBAJQ,cASdjB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKsB,KAAK,IACVC,IAAKC,IAAUtB,UAAU,WAAWuB,IAAI,UAExC3B,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,kCAQFF,EAAAC,EAAAC,cAAA,KACEE,UAAU,WACVE,KAAK,sCACLU,OAAO,SACPC,IAAI,uBAJN,2BAnCQG,IAAMC,WCOJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a96e7333.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inner_pi.cf5106c3.png\";","module.exports = __webpack_public_path__ + \"static/media/Elyse_Shackleton_Resume_June_2018.1819b79a.pdf\";","import React, { Component } from 'react';\nimport '../App.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport agent_file from '../media/Elyse_Shackleton_Resume_June_2018.pdf';\n\nclass Heading extends React.Component {\n    render() {\n      return (\n        <div>\n        <view width=\"98vw\">\n        <code>\n        <h3 className=\"Title\">Elyse Shackleton Code Portfolio </h3>\n        <div className=\"Button-bar\">\n            <Button href=\"https://elyshack.github.io/portfolio\" variant=\"outline-primary\">Home  </Button>\n                <DropdownButton variant=\"outline-primary\" as={ButtonGroup} title=\"Projects\" id=\"bg-nested-dropdown\">\n                    <Dropdown.Item eventKey=\"1\" href=\"https://elyshack.github.io/testpage\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">Html test page</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"2\">Album</Dropdown.Item>\n                </DropdownButton>\n\n            <Button href={agent_file} variant=\"outline-primary\" download=\"Elyse_Shackleton_Resume_June_2018.pdf\">Resume</Button>\n        </div>        \n        </code>\n        </view>\n        <div>\n        <hr className=\"Line-break\"/>\n        </div>\n        </div>\n      );\n    }\n} export default Heading;","import React, { Component} from 'react';\nimport inner_pi from './components/images/inner_pi.png';\nimport './App.css';\nimport Heading from './components/Heading.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <Heading />\n          <p>Follow @ <a \n            className=\"App-link\"\n            href=\"https://twitter.com/elyseshackleton\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          Twitter</a>,  <a \n            className=\"App-link\"\n            href=\"https://instagram.com/elyshack\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          Instagram\n          </a>\n          </p>\n          <div>\n          <img flex=\"1\"\n          src={inner_pi} className=\"App-logo\" alt=\"logo\"/>\n          </div>\n          <p>\n            <highlight>Fight me irl</highlight>\n          </p>\n          {/* <Container>\n            <ButtonToolbar>\n              <Button varient=\"primary\">No Fight</Button>\n              <Button varient=\"warning\">Yoinks</Button>\n            </ButtonToolbar> \n          </Container> */}\n          <a\n            className=\"App-link\"\n            href=\"https://elyshack.github.io/testpage\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Test Page Link\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}